---
/**
 * Responsive grid of linkable "buttons" with image, title, and optional subtitle.
 *
 * Props:
 *  - buttons: array of {href, img, title, subtitle}
 *  - numCols: (optional) fixed number of columns
 *  - shadow: button hover shadow classes
 *  - bgColor: button background & hover color classes
 *  - imgSize: max size of the image (defaults: "max-w-32 max-h-32")
 *  - aspectRatio: render buttons at common aspect ratios
 *  - rowGap, colGap, gap: grid spacing
 *  - containerMargin: margin around the grid
 *
 * Behavior:
 *  - Auto-opens external links in new tabs.
 *  - Grid auto-fits buttons unless numCols is set.
 *  - Images scale down proportionally (never stretched).
 */

const {
  buttons,
  numCols,
  shadow = "shadow hover:shadow-lg",
  bgColor = null,
  imgSize = "w-32 h-32",
  rowGap = "gap-y-6",
  colGap = "gap-x-6",
  aspectRatio = "1/1",
  gap = "gap-6",
  containerMargin = "my-10",
} = Astro.props;

const ratioMap = {
  "1/1": "aspect-square",
  "16/9": "aspect-video",
  "4/3": "aspect-[4/3]",
  "3/2": "aspect-[3/2]",
  "5/1": "aspect-[5/1]",
};

// Grid container style
const outerContainerStyle = `flex justify-center ${containerMargin}`;

// Inner grid style
const innerGridStyle = `grid ${rowGap ?? gap} ${colGap ?? gap}`;

// Grid-template: either fixed columns or auto-fit
const gridTemplateStyle = numCols
  ? `grid-template-columns: repeat(${numCols}, minmax(0, 1fr));`
  : `grid-template-columns: repeat(auto-fit, minmax(0, 1fr));`;

// Aspect ratio class (always fraction-based)
const aspectClass = ratioMap[aspectRatio] || "aspect-square";

// Button style
const defaultBg = "bg-[var(--entry-bg)] hover:bg-[var(--entry-hover-bg)]";
const bgCol = bgColor ?? defaultBg;

const buttonStyle = `
  group block flex flex-col justify-center items-center text-center
  ${aspectClass} ${bgCol} no-underline hover:no-underline
  ${shadow} transition`;

const imgStyle = `${imgSize} object-contain`;
---

<div class={outerContainerStyle}>
  <div class={innerGridStyle} style={gridTemplateStyle}>
    {
      buttons.map((btn) => (
        <a
          href={btn.href}
          target={btn.href.startsWith("http") ? "_blank" : undefined}
          class={buttonStyle}
        >
          <img src={btn.img} alt={btn.title} class={imgStyle} />
          <h3 class="mb-2">{btn.title}</h3>
          {btn.subtitle && <p>{btn.subtitle}</p>}
        </a>
      ))
    }
  </div>
</div>
