---
import "../styles/global.css";

const {
  breadcrumbs = [],
  title = "Materials Cloud",
  maxWidth = "max-w-[1000px]",
  padding = "py-5 px-7 mb-4",
} = Astro.props;

const baseHref = (import.meta.env.BASE_URL || "/").replace(/\/?$/, "/"); // also add trailing slash if not present

const activeSection =
  breadcrumbs.length > 0 ? breadcrumbs[0].name.toLowerCase() : "";

const navLinks = [
  { name: "LEARN", href: "learn" },
  { name: "WORK", href: "work" },
  { name: "DISCOVER", href: "discover" },
  { name: "EXPLORE", href: "explore" },
  { name: "ARCHIVE", href: "archive" },
];

const moreLinks = [
  { name: "Policies", href: "policies" },
  { name: "Data Management Plan", href: "dmp" },
  { name: "Terms of Use", href: "termssummary" },
  { name: "Infrastructure", href: "infrastructure" },
  { name: "Team & Contact", href: "team" },
  { name: "Partners", href: "#partners" },
  // { name: "Connect your REST API", href: "explore/connect" },
];

// slot div styling
const contentWrapperStyle = `bg-white rounded-sm shadow-md min-w-[350px] w-full ${padding} ${maxWidth} `;

// header styling
const htmlStyle = "m-0 w-full h-full bg-[#f0f6f9]";
const iconStyle = "inline-block w-14 h-auto ml-2 flex-shrink-0";

const navLinkBaseStyle =
  "font-semibold text-gray-700 hover:text-gray-500 hover:no-underline";
const navLinkSelectedStyle =
  "text-red-700 bg-gray-100";

// NavLinks
const desktopNavLinkStyle = `px-4 h-16 border-b border-gray-200 flex items-center ${navLinkBaseStyle}`;
const mobileNavLinkStyle = `py-2 px-3 ${navLinkBaseStyle}`;

// More drop down Styling.
const moreLinkStyle =
  "block px-4 py-1 text-md text-gray-700 hover:bg-gray-100 hover:no-underline";
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Desktop "More ▾" dropdown
    const btn = document.getElementById("mc-more-button");
    const menu = document.getElementById("mc-drop-menu");
    if (btn && menu) {
      btn.addEventListener("click", (e) => {
        e.stopPropagation();
        menu.classList.toggle("hidden");
      });
      document.addEventListener("click", (e) => {
        if (!menu.contains(e.target) && e.target !== btn) {
          menu.classList.add("hidden");
        }
      });
    }

    // handle smooth hamburger scroll.
    const mobileBtn = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    if (mobileBtn && mobileMenu) {
      mobileBtn.addEventListener("click", () => {
        if (mobileMenu.classList.contains("max-h-0")) {
          const fullHeight = mobileMenu.scrollHeight;
          mobileMenu.style.maxHeight = fullHeight + "px";
          mobileMenu.classList.remove("max-h-0");
        } else {
          mobileMenu.style.maxHeight = "0px";
          mobileMenu.classList.add("max-h-0");
        }
      });
    }
  });
</script>

<html lang="en" class={htmlStyle}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="images/mcloud_logo.png" />

    <base href={baseHref} />

    <title>{title}</title>
  </head>

  <body>
    <header class="w-full bg-white shadow">
      <nav
        class="flex items-center justify-between h-16 px-4 border-b border-gray-200"
      >
        <a class={iconStyle} href="">
          <img src="images/mcloud-logo.svg" alt="Logo" class="w-full h-full" />
        </a>

        {/* Desktop nav */}
        <div class="hidden md:flex ml-4">
          {
            navLinks.map((link) => (
              <a
                class={`${desktopNavLinkStyle} ${activeSection === link.name.toLowerCase() ? navLinkSelectedStyle : ""}`}
                href={link.href}
              >
                {link.name}
              </a>
            ))
          }
        </div>

        {/* Desktop more dropdown */}
        <div class="relative ml-auto hidden md:block">
          <button
            id="mc-more-button"
            type="button"
            class="px-3 font-semibold cursor-pointer text-gray-700 hover:text-gray-500 flex items-center"
          >
            More ▾
          </button>
          <div
            id="mc-drop-menu"
            class="absolute right-0 mt-2 w-56 bg-white border border-gray-200 rounded-md shadow-lg py-1 hidden z-50"
          >
            {
              moreLinks.map((link) => (
                <a href={link.href} class={moreLinkStyle}>
                  {link.name}
                </a>
              ))
            }
          </div>
        </div>

        {/* Mobile hamburger */}
        <div class="md:hidden ml-auto">
          <button
            id="mobile-menu-button"
            type="button"
            class="p-2 cursor-pointer text-gray-700 hover:text-gray-500"
          >
            <svg
              class="h-6 w-6"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </nav>

      {/* Mobile dropdown menu */}
      <div
        id="mobile-menu"
        class="md:hidden max-h-0 overflow-hidden transition-all duration-300 ease-in-out px-4 border-b border-gray-200"
      >
        <div class="flex flex-col">
          {
            navLinks.map((link) => (
              <a
                class={`${mobileNavLinkStyle} ${activeSection === link.name.toLowerCase() ? navLinkSelectedStyle : ""}`}
                href={link.href}
              >
                {link.name}
              </a>
            ))
          }

          <div class="mt-2 border-t border-gray-100 pt-2">
            {
              moreLinks.map((link) => (
                <a href={link.href} class={moreLinkStyle}>
                  {link.name}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </header>

    {
      breadcrumbs.length > 0 ? (
        <ul
          id="breadcrumbs"
          class="flex items-center bg-gray-50 border border-gray-300 rounded px-5 py-1 shadow-sm font-light m-5 overflow-hidden list-none"
        >
          {breadcrumbs.map((crumb, index) => (
            <li
              key={index}
              class="relative pr-8 pl-2 text-[rgb(62,112,187)] first:pl-0 last:pr-0"
            >
              {index === breadcrumbs.length - 1 || !crumb.href ? (
                <span>{crumb.name}</span>
              ) : (
                <a href={crumb.href} class="hover:underline" style="color: #3e70bb;">
                  {crumb.name}
                </a>
              )}
              {index !== breadcrumbs.length - 1 && (
                <svg
                  class="absolute top-1/2 right-0 -translate-y-1/2 w-6 h-6 text-gray-300 transform scale-y-300"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="1.0"
                  viewBox="0 0 24 24"
                >
                  <path d="M8 6 L16 12 L8 18" />
                </svg>
              )}
            </li>
          ))}
        </ul>
      ) : (
        // Placeholder div with same height & margin to keep spacing
        <div id="breadcrumbs" class="m-5 py-2" />
      )
    }

    <div class="flex justify-center">
      <div class={contentWrapperStyle}>
        <slot />
      </div>
    </div>
  </body>
</html>
