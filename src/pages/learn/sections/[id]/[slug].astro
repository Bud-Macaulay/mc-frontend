---
import Layout from "@layouts/Layout.astro";
import LearnBannerList from "@components/LearnBannerList.astro";

import { ExternalLink } from "lucide-astro";

import fs from "fs";
import path from "path";

// import { PUBLIC_FILES_BASE } from "astro:env/client";

const MANIFEST_FILE = path.resolve("./src/data/learn-manifest.json");

// Load manifest once
const manifest = JSON.parse(fs.readFileSync(MANIFEST_FILE, "utf-8"));

export async function getStaticPaths() {
  const MANIFEST_FILE = path.resolve("./src/data/learn-manifest.json");

  const manifest = JSON.parse(fs.readFileSync(MANIFEST_FILE, "utf-8"));

  // Only sections and subsections
  const paths = manifest
    .filter((item) => item.type === "section" || item.type === "subsection")
    .map((item) => ({
      params: { id: item.id, slug: item.slug },
    }));

  return paths;
}

const { id } = Astro.params;

// Find this section/subsection
const pageData = manifest.find((item) => item.id === id);
if (!pageData) throw new Error(`No page found for id ${id}`);

// Find children
const children = manifest.filter((item) => item.parentId === id);

const breadcrumbs = [
  { name: "Home", href: "." },
  { name: "Learn", href: "learn" },
];

let current = pageData;
const parentTrail = [];

// walk up parent chain
while (current.parentId) {
  const parent = manifest.find((item) => item.id === current.parentId);
  if (!parent) break;

  parentTrail.unshift({
    name: parent.title,
    href: `learn/sections/${parent.id}/${parent.slug}`,
  });

  current = parent;
}

// add the parent trail
breadcrumbs.push(...parentTrail);

// current section/subsection breadcrumb
breadcrumbs.push({
  name: pageData.title,
  href: "",
});

const title = pageData.title;
---

<Layout title={title} breadcrumbs={breadcrumbs}>
  <div class="space-y-10">
    <section class="space-y-4">
      <h3 class="text-2xl">{pageData.title}</h3>
      <hr class="border-t border-gray-300 mb-6" />
      <p>{pageData.description}</p>

      {/*  Additional resources [ ICTP links etc.] */}
      {
        pageData.additional_resources &&
          pageData.additional_resources.map((res) => (
            <a
              href={`${res.url}`}
              target="_blank"
              class="flex items-center space-x-1 hover:underline"
            >
              <ExternalLink class="w-6 h-6 mr-1" />

              <span>{res.name}</span>
            </a>
          ))
      }
    </section>
    {
      children.length > 0 && (
        <LearnBannerList entries={children} rootPath="work/tools" />
      )
    }
  </div>
</Layout>
