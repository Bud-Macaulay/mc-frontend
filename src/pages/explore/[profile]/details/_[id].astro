---
/*
method for building an index for each node in a given profile...
THIS PROBABLY NEEDS TO CHANGE:

Issues: 
  1. API Hit on profile.link/api/v4/nodes only returns 400 nodes, this means only the first 400 nodes for a given profile get rendered.
  2. Currently on local machine we can export prerender as false; allowing us to
  not have to index every page on build.
     This does not work for GH pages and will need to configure an SSR (Vercel)? for deployment via gh pages.
      Attempting to run with:
     'npx astro build' and export const prerender = true; 
     results in a build time just over 6minutes and 4500 pages... This is stupid.

I think in the legacy deployment we instead:
  have explore/[profile] be a singular static page that determines what content to load
  via react buttons / URLSearchParams. 

  This avoids both of the issues stated above ^ by spoofing urls instead of 
  using clever astro dynamic pathing

*/
import Layout from "@layouts/Layout.astro";

import fs from "fs";
import yaml from "js-yaml";

// for final build this will likely NEED to be false with an SSR adapter.
export const prerender = true;

// Generate static pat</Layout>hs if you want some pre-rendered pages (optional)
export async function getStaticPaths() {
  const file = fs.readFileSync("./src/data/explore.yml", "utf8");
  const data = yaml.load(file);
  const profiles = data.profiles;

  const paths = [];

  for (const profile of profiles) {
    const res = await fetch(
      `https://aiida.dev.materialscloud.org/${profile.link}/api/v4/nodes/`
    );
    if (!res.ok) continue;

    const json = await res.json();

    json.data.nodes.forEach((node) => {
      paths.push({
        params: {
          profile: profile.link,
          id: node.uuid,
        },
      });
    });
  }

  return paths;
}

// Get URL params
const { profile, id } = Astro.params;

const baseApiUrl = `https://aiida.dev.materialscloud.org/${profile}/api/v4/nodes/`;

// Fetch node data on request (SSR)
const res = await fetch(`${baseApiUrl}${id}`);
if (!res.ok) {
  throw new Error(`Failed to fetch node data for id: ${id}`);
}

const json = await res.json();
const node = json.data; // adjust if API differs

// Example: get node type or fallback
const nodeType = node.attributes?.node_type || "none";

const breadcrumbs = [
  { name: "Explore", href: "explore" },
  { name: profile, href: `explore/${profile}` },
  { name: id, href: "" },
];
---

<Layout
  title={`Explore: ${profile}`}
  breadcrumbs={breadcrumbs}
  maxWidth="max-w-[1920px]"
>
  <div class="space-y-10">
    <section class="space-y-4">
      <h3 class="text-2xl">{`Node entry for ${profile}`}</h3>
      <hr class="border-t border-gray-300 mb-6" />

      <div class="flex items-center gap-2 flex-wrap">
        <h3 class="text-red-700">{profile}</h3>
      </div>
      Profile: {profile}
      <br />
      Node ID: {id}
      <br />
      Node Type: {nodeType}
    </section>
    <pre>{JSON.stringify(node, null, 2)}</pre>
  </div>
</Layout>
